/* 
 * API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TruckPlanApiClient.Client;
using TruckPlanApiClient.Model;

namespace TruckPlanApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IGPSTruckRecordsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all GPSTruckRecords
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GPSTruckRecordSelectDto&gt;</returns>
        List<GPSTruckRecordSelectDto> ApiV2GPSTruckRecordsGet ();

        /// <summary>
        /// Returns all GPSTruckRecords
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GPSTruckRecordSelectDto&gt;</returns>
        ApiResponse<List<GPSTruckRecordSelectDto>> ApiV2GPSTruckRecordsGetWithHttpInfo ();
        /// <summary>
        /// Retrieves a GPSTruckRecord by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the GPSTruckRecord</param>
        /// <returns>GPSTruckRecordSelectDtoApiResult</returns>
        GPSTruckRecordSelectDtoApiResult ApiV2GPSTruckRecordsIdGet (Guid? id);

        /// <summary>
        /// Retrieves a GPSTruckRecord by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the GPSTruckRecord</param>
        /// <returns>ApiResponse of GPSTruckRecordSelectDtoApiResult</returns>
        ApiResponse<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsIdGetWithHttpInfo (Guid? id);
        /// <summary>
        /// Creates a GPSTruckRecord
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GPSTruckRecordSelectDtoApiResult</returns>
        GPSTruckRecordSelectDtoApiResult ApiV2GPSTruckRecordsPost (GPSTruckRecordDto body = null);

        /// <summary>
        /// Creates a GPSTruckRecord
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GPSTruckRecordSelectDtoApiResult</returns>
        ApiResponse<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsPostWithHttpInfo (GPSTruckRecordDto body = null);
        /// <summary>
        /// Updates a GPSTruckRecord by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A GPSTruckRecord representation (optional)</param>
        /// <returns>GPSTruckRecordSelectDtoApiResult</returns>
        GPSTruckRecordSelectDtoApiResult ApiV2GPSTruckRecordsPut (GPSTruckRecordDto body = null, Guid? id = null);

        /// <summary>
        /// Updates a GPSTruckRecord by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A GPSTruckRecord representation (optional)</param>
        /// <returns>ApiResponse of GPSTruckRecordSelectDtoApiResult</returns>
        ApiResponse<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsPutWithHttpInfo (GPSTruckRecordDto body = null, Guid? id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApiV2GPSTruckRecordsTestGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2GPSTruckRecordsTestGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns all GPSTruckRecords
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GPSTruckRecordSelectDto&gt;</returns>
        System.Threading.Tasks.Task<List<GPSTruckRecordSelectDto>> ApiV2GPSTruckRecordsGetAsync ();

        /// <summary>
        /// Returns all GPSTruckRecords
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GPSTruckRecordSelectDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GPSTruckRecordSelectDto>>> ApiV2GPSTruckRecordsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves a GPSTruckRecord by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the GPSTruckRecord</param>
        /// <returns>Task of GPSTruckRecordSelectDtoApiResult</returns>
        System.Threading.Tasks.Task<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsIdGetAsync (Guid? id);

        /// <summary>
        /// Retrieves a GPSTruckRecord by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the GPSTruckRecord</param>
        /// <returns>Task of ApiResponse (GPSTruckRecordSelectDtoApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GPSTruckRecordSelectDtoApiResult>> ApiV2GPSTruckRecordsIdGetAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Creates a GPSTruckRecord
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GPSTruckRecordSelectDtoApiResult</returns>
        System.Threading.Tasks.Task<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsPostAsync (GPSTruckRecordDto body = null);

        /// <summary>
        /// Creates a GPSTruckRecord
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GPSTruckRecordSelectDtoApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GPSTruckRecordSelectDtoApiResult>> ApiV2GPSTruckRecordsPostAsyncWithHttpInfo (GPSTruckRecordDto body = null);
        /// <summary>
        /// Updates a GPSTruckRecord by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A GPSTruckRecord representation (optional)</param>
        /// <returns>Task of GPSTruckRecordSelectDtoApiResult</returns>
        System.Threading.Tasks.Task<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsPutAsync (GPSTruckRecordDto body = null, Guid? id = null);

        /// <summary>
        /// Updates a GPSTruckRecord by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A GPSTruckRecord representation (optional)</param>
        /// <returns>Task of ApiResponse (GPSTruckRecordSelectDtoApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GPSTruckRecordSelectDtoApiResult>> ApiV2GPSTruckRecordsPutAsyncWithHttpInfo (GPSTruckRecordDto body = null, Guid? id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2GPSTruckRecordsTestGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2GPSTruckRecordsTestGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class GPSTruckRecordsApi : IGPSTruckRecordsApi
    {
        private TruckPlanApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GPSTruckRecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GPSTruckRecordsApi(String basePath)
        {
            this.Configuration = new TruckPlanApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TruckPlanApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GPSTruckRecordsApi"/> class
        /// </summary>
        /// <returns></returns>
        public GPSTruckRecordsApi()
        {
            this.Configuration = TruckPlanApiClient.Client.Configuration.Default;

            ExceptionFactory = TruckPlanApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GPSTruckRecordsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GPSTruckRecordsApi(TruckPlanApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TruckPlanApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TruckPlanApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TruckPlanApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TruckPlanApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns all GPSTruckRecords 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GPSTruckRecordSelectDto&gt;</returns>
        public List<GPSTruckRecordSelectDto> ApiV2GPSTruckRecordsGet ()
        {
            ApiResponse<List<GPSTruckRecordSelectDto>> localVarResponse = ApiV2GPSTruckRecordsGetWithHttpInfo();

            return localVarResponse.Data;
        }


       

        /// <summary>
        /// Returns all GPSTruckRecords 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GPSTruckRecordSelectDto&gt;</returns>
        public ApiResponse<List<GPSTruckRecordSelectDto>>  ApiV2GPSTruckRecordsGetWithHttpInfo ()
        {
           
            var localVarPath = "/api/v2/GPSTruckRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType) ;


            
            int localVarStatusCode = (int) localVarResponse.StatusCode;


            return new ApiResponse<List<GPSTruckRecordSelectDto>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (List<GPSTruckRecordSelectDto>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GPSTruckRecordSelectDto>)));


        }

        /// <summary>
        /// Returns all GPSTruckRecords 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GPSTruckRecordSelectDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<GPSTruckRecordSelectDto>> ApiV2GPSTruckRecordsGetAsync ()
        {
             ApiResponse<List<GPSTruckRecordSelectDto>> localVarResponse = await ApiV2GPSTruckRecordsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all GPSTruckRecords 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GPSTruckRecordSelectDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GPSTruckRecordSelectDto>>> ApiV2GPSTruckRecordsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/GPSTruckRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GPSTruckRecordSelectDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GPSTruckRecordSelectDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GPSTruckRecordSelectDto>)));
        }

        /// <summary>
        /// Retrieves a GPSTruckRecord by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the GPSTruckRecord</param>
        /// <returns>GPSTruckRecordSelectDtoApiResult</returns>
        public GPSTruckRecordSelectDtoApiResult ApiV2GPSTruckRecordsIdGet (Guid? id)
        {
             ApiResponse<GPSTruckRecordSelectDtoApiResult> localVarResponse = ApiV2GPSTruckRecordsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a GPSTruckRecord by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the GPSTruckRecord</param>
        /// <returns>ApiResponse of GPSTruckRecordSelectDtoApiResult</returns>
        public ApiResponse< GPSTruckRecordSelectDtoApiResult > ApiV2GPSTruckRecordsIdGetWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GPSTruckRecordsApi->ApiV2GPSTruckRecordsIdGet");

            var localVarPath = "/api/v2/GPSTruckRecords/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GPSTruckRecordSelectDtoApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GPSTruckRecordSelectDtoApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPSTruckRecordSelectDtoApiResult)));
        }

        /// <summary>
        /// Retrieves a GPSTruckRecord by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the GPSTruckRecord</param>
        /// <returns>Task of GPSTruckRecordSelectDtoApiResult</returns>
        public async System.Threading.Tasks.Task<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsIdGetAsync (Guid? id)
        {
             ApiResponse<GPSTruckRecordSelectDtoApiResult> localVarResponse = await ApiV2GPSTruckRecordsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a GPSTruckRecord by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the GPSTruckRecord</param>
        /// <returns>Task of ApiResponse (GPSTruckRecordSelectDtoApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GPSTruckRecordSelectDtoApiResult>> ApiV2GPSTruckRecordsIdGetAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GPSTruckRecordsApi->ApiV2GPSTruckRecordsIdGet");

            var localVarPath = "/api/v2/GPSTruckRecords/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GPSTruckRecordSelectDtoApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GPSTruckRecordSelectDtoApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPSTruckRecordSelectDtoApiResult)));
        }

        /// <summary>
        /// Creates a GPSTruckRecord 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GPSTruckRecordSelectDtoApiResult</returns>
        public GPSTruckRecordSelectDtoApiResult ApiV2GPSTruckRecordsPost (GPSTruckRecordDto body = null)
        {
             ApiResponse<GPSTruckRecordSelectDtoApiResult> localVarResponse = ApiV2GPSTruckRecordsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a GPSTruckRecord 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GPSTruckRecordSelectDtoApiResult</returns>
        public ApiResponse< GPSTruckRecordSelectDtoApiResult > ApiV2GPSTruckRecordsPostWithHttpInfo (GPSTruckRecordDto body = null)
        {

            var localVarPath = "/api/v2/GPSTruckRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GPSTruckRecordSelectDtoApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GPSTruckRecordSelectDtoApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPSTruckRecordSelectDtoApiResult)));
        }

        /// <summary>
        /// Creates a GPSTruckRecord 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GPSTruckRecordSelectDtoApiResult</returns>
        public async System.Threading.Tasks.Task<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsPostAsync (GPSTruckRecordDto body = null)
        {
             ApiResponse<GPSTruckRecordSelectDtoApiResult> localVarResponse = await ApiV2GPSTruckRecordsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a GPSTruckRecord 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GPSTruckRecordSelectDtoApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GPSTruckRecordSelectDtoApiResult>> ApiV2GPSTruckRecordsPostAsyncWithHttpInfo (GPSTruckRecordDto body = null)
        {

            var localVarPath = "/api/v2/GPSTruckRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GPSTruckRecordSelectDtoApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GPSTruckRecordSelectDtoApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPSTruckRecordSelectDtoApiResult)));
        }

        /// <summary>
        /// Updates a GPSTruckRecord by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A GPSTruckRecord representation (optional)</param>
        /// <returns>GPSTruckRecordSelectDtoApiResult</returns>
        public GPSTruckRecordSelectDtoApiResult ApiV2GPSTruckRecordsPut (GPSTruckRecordDto body = null, Guid? id = null)
        {
             ApiResponse<GPSTruckRecordSelectDtoApiResult> localVarResponse = ApiV2GPSTruckRecordsPutWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a GPSTruckRecord by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A GPSTruckRecord representation (optional)</param>
        /// <returns>ApiResponse of GPSTruckRecordSelectDtoApiResult</returns>
        public ApiResponse< GPSTruckRecordSelectDtoApiResult > ApiV2GPSTruckRecordsPutWithHttpInfo (GPSTruckRecordDto body = null, Guid? id = null)
        {

            var localVarPath = "/api/v2/GPSTruckRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GPSTruckRecordSelectDtoApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GPSTruckRecordSelectDtoApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPSTruckRecordSelectDtoApiResult)));
        }

        /// <summary>
        /// Updates a GPSTruckRecord by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A GPSTruckRecord representation (optional)</param>
        /// <returns>Task of GPSTruckRecordSelectDtoApiResult</returns>
        public async System.Threading.Tasks.Task<GPSTruckRecordSelectDtoApiResult> ApiV2GPSTruckRecordsPutAsync (GPSTruckRecordDto body = null, Guid? id = null)
        {
             ApiResponse<GPSTruckRecordSelectDtoApiResult> localVarResponse = await ApiV2GPSTruckRecordsPutAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a GPSTruckRecord by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A GPSTruckRecord representation (optional)</param>
        /// <returns>Task of ApiResponse (GPSTruckRecordSelectDtoApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GPSTruckRecordSelectDtoApiResult>> ApiV2GPSTruckRecordsPutAsyncWithHttpInfo (GPSTruckRecordDto body = null, Guid? id = null)
        {

            var localVarPath = "/api/v2/GPSTruckRecords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GPSTruckRecordSelectDtoApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GPSTruckRecordSelectDtoApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPSTruckRecordSelectDtoApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApiV2GPSTruckRecordsTestGet ()
        {
             ApiV2GPSTruckRecordsTestGetWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV2GPSTruckRecordsTestGetWithHttpInfo ()
        {

            var localVarPath = "/api/v2/GPSTruckRecords/Test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsTestGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2GPSTruckRecordsTestGetAsync ()
        {
             await ApiV2GPSTruckRecordsTestGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2GPSTruckRecordsTestGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/GPSTruckRecords/Test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2GPSTruckRecordsTestGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
