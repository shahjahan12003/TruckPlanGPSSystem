/* 
 * API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TruckPlanApiClient.Client;
using TruckPlanApiClient.Model;

namespace TruckPlanApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique id for the User (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult ApiV2UsersDelete (int? id = null);

        /// <summary>
        /// Deletes a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique id for the User (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> ApiV2UsersDeleteWithHttpInfo (int? id = null);
        /// <summary>
        /// Returns all Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> ApiV2UsersGet ();

        /// <summary>
        /// Returns all Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> ApiV2UsersGetWithHttpInfo ();
        /// <summary>
        /// Retrieves a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the User</param>
        /// <returns>UserApiResult</returns>
        UserApiResult ApiV2UsersIdGet (int? id);

        /// <summary>
        /// Retrieves a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the User</param>
        /// <returns>ApiResponse of UserApiResult</returns>
        ApiResponse<UserApiResult> ApiV2UsersIdGetWithHttpInfo (int? id);
        /// <summary>
        /// Creates a User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>UserApiResult</returns>
        UserApiResult ApiV2UsersPost (UserDto body = null);

        /// <summary>
        /// Creates a User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserApiResult</returns>
        ApiResponse<UserApiResult> ApiV2UsersPostWithHttpInfo (UserDto body = null);
        /// <summary>
        /// Updates a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A User representation (optional)</param>
        /// <returns>ApiResult</returns>
        ApiResult ApiV2UsersPut (User body = null, int? id = null);

        /// <summary>
        /// Updates a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A User representation (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        ApiResponse<ApiResult> ApiV2UsersPutWithHttpInfo (User body = null, int? id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApiV2UsersTokenPost ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV2UsersTokenPostWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique id for the User (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> ApiV2UsersDeleteAsync (int? id = null);

        /// <summary>
        /// Deletes a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique id for the User (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> ApiV2UsersDeleteAsyncWithHttpInfo (int? id = null);
        /// <summary>
        /// Returns all Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> ApiV2UsersGetAsync ();

        /// <summary>
        /// Returns all Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> ApiV2UsersGetAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the User</param>
        /// <returns>Task of UserApiResult</returns>
        System.Threading.Tasks.Task<UserApiResult> ApiV2UsersIdGetAsync (int? id);

        /// <summary>
        /// Retrieves a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the User</param>
        /// <returns>Task of ApiResponse (UserApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserApiResult>> ApiV2UsersIdGetAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Creates a User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserApiResult</returns>
        System.Threading.Tasks.Task<UserApiResult> ApiV2UsersPostAsync (UserDto body = null);

        /// <summary>
        /// Creates a User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserApiResult>> ApiV2UsersPostAsyncWithHttpInfo (UserDto body = null);
        /// <summary>
        /// Updates a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A User representation (optional)</param>
        /// <returns>Task of ApiResult</returns>
        System.Threading.Tasks.Task<ApiResult> ApiV2UsersPutAsync (User body = null, int? id = null);

        /// <summary>
        /// Updates a User by unique id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A User representation (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResult>> ApiV2UsersPutAsyncWithHttpInfo (User body = null, int? id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2UsersTokenPostAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2UsersTokenPostAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UsersApi : IUsersApi
    {
        private TruckPlanApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new TruckPlanApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TruckPlanApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = TruckPlanApiClient.Client.Configuration.Default;

            ExceptionFactory = TruckPlanApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(TruckPlanApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TruckPlanApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TruckPlanApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TruckPlanApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TruckPlanApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique id for the User (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult ApiV2UsersDelete (int? id = null)
        {
             ApiResponse<ApiResult> localVarResponse = ApiV2UsersDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique id for the User (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > ApiV2UsersDeleteWithHttpInfo (int? id = null)
        {

            var localVarPath = "/api/v2/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        /// Deletes a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique id for the User (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> ApiV2UsersDeleteAsync (int? id = null)
        {
             ApiResponse<ApiResult> localVarResponse = await ApiV2UsersDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique id for the User (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> ApiV2UsersDeleteAsyncWithHttpInfo (int? id = null)
        {

            var localVarPath = "/api/v2/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        /// Returns all Users 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> ApiV2UsersGet ()
        {
             ApiResponse<List<User>> localVarResponse = ApiV2UsersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Users 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > ApiV2UsersGetWithHttpInfo ()
        {

            var localVarPath = "/api/v2/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Returns all Users 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> ApiV2UsersGetAsync ()
        {
             ApiResponse<List<User>> localVarResponse = await ApiV2UsersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all Users 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> ApiV2UsersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Retrieves a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the User</param>
        /// <returns>UserApiResult</returns>
        public UserApiResult ApiV2UsersIdGet (int? id)
        {
             ApiResponse<UserApiResult> localVarResponse = ApiV2UsersIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the User</param>
        /// <returns>ApiResponse of UserApiResult</returns>
        public ApiResponse< UserApiResult > ApiV2UsersIdGetWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->ApiV2UsersIdGet");

            var localVarPath = "/api/v2/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserApiResult)));
        }

        /// <summary>
        /// Retrieves a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the User</param>
        /// <returns>Task of UserApiResult</returns>
        public async System.Threading.Tasks.Task<UserApiResult> ApiV2UsersIdGetAsync (int? id)
        {
             ApiResponse<UserApiResult> localVarResponse = await ApiV2UsersIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">a unique id for the User</param>
        /// <returns>Task of ApiResponse (UserApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserApiResult>> ApiV2UsersIdGetAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->ApiV2UsersIdGet");

            var localVarPath = "/api/v2/Users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserApiResult)));
        }

        /// <summary>
        /// Creates a User 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>UserApiResult</returns>
        public UserApiResult ApiV2UsersPost (UserDto body = null)
        {
             ApiResponse<UserApiResult> localVarResponse = ApiV2UsersPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a User 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserApiResult</returns>
        public ApiResponse< UserApiResult > ApiV2UsersPostWithHttpInfo (UserDto body = null)
        {

            var localVarPath = "/api/v2/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserApiResult)));
        }

        /// <summary>
        /// Creates a User 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserApiResult</returns>
        public async System.Threading.Tasks.Task<UserApiResult> ApiV2UsersPostAsync (UserDto body = null)
        {
             ApiResponse<UserApiResult> localVarResponse = await ApiV2UsersPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a User 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserApiResult>> ApiV2UsersPostAsyncWithHttpInfo (UserDto body = null)
        {

            var localVarPath = "/api/v2/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserApiResult)));
        }

        /// <summary>
        /// Updates a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A User representation (optional)</param>
        /// <returns>ApiResult</returns>
        public ApiResult ApiV2UsersPut (User body = null, int? id = null)
        {
             ApiResponse<ApiResult> localVarResponse = ApiV2UsersPutWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A User representation (optional)</param>
        /// <returns>ApiResponse of ApiResult</returns>
        public ApiResponse< ApiResult > ApiV2UsersPutWithHttpInfo (User body = null, int? id = null)
        {

            var localVarPath = "/api/v2/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        /// Updates a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A User representation (optional)</param>
        /// <returns>Task of ApiResult</returns>
        public async System.Threading.Tasks.Task<ApiResult> ApiV2UsersPutAsync (User body = null, int? id = null)
        {
             ApiResponse<ApiResult> localVarResponse = await ApiV2UsersPutAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a User by unique id 
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="id">A User representation (optional)</param>
        /// <returns>Task of ApiResponse (ApiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResult>> ApiV2UsersPutAsyncWithHttpInfo (User body = null, int? id = null)
        {

            var localVarPath = "/api/v2/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApiV2UsersTokenPost ()
        {
             ApiV2UsersTokenPostWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV2UsersTokenPostWithHttpInfo ()
        {

            var localVarPath = "/api/v2/Users/Token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

             // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2UsersTokenPostAsync ()
        {
             await ApiV2UsersTokenPostAsyncWithHttpInfo();

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TruckPlanApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2UsersTokenPostAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/Users/Token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2UsersTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
