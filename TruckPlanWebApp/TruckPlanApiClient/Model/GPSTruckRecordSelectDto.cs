/* 
 * API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TruckPlanApiClient.Client.SwaggerDateConverter;

namespace TruckPlanApiClient.Model
{
    /// <summary>
    /// GPSTruckRecordSelectDto
    /// </summary>
    [DataContract]
        public partial class GPSTruckRecordSelectDto :  IEquatable<GPSTruckRecordSelectDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GPSTruckRecordSelectDto" /> class.
        /// </summary>
        /// <param name="gpsDeviceID">gpsDeviceID.</param>
        /// <param name="recordDate">recordDate.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="countryName">countryName.</param>
        /// <param name="kilometer">kilometer.</param>
        /// <param name="id">id.</param>
        public GPSTruckRecordSelectDto(string gpsDeviceID = default(string), DateTime? recordDate = default(DateTime?), double? latitude = default(double?), double? longitude = default(double?), string countryName = default(string), double? kilometer = default(double?), Guid? id = default(Guid?))
        {
            this.GpsDeviceID = gpsDeviceID;
            this.RecordDate = recordDate;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.CountryName = countryName;
            this.Kilometer = kilometer;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets GpsDeviceID
        /// </summary>
        [DataMember(Name="gpsDeviceID", EmitDefaultValue=false)]
        public string GpsDeviceID { get; set; }

        /// <summary>
        /// Gets or Sets RecordDate
        /// </summary>
        [DataMember(Name="recordDate", EmitDefaultValue=false)]
        public DateTime? RecordDate { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name="countryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets Kilometer
        /// </summary>
        [DataMember(Name="kilometer", EmitDefaultValue=false)]
        public double? Kilometer { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GPSTruckRecordSelectDto {\n");
            sb.Append("  GpsDeviceID: ").Append(GpsDeviceID).Append("\n");
            sb.Append("  RecordDate: ").Append(RecordDate).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  Kilometer: ").Append(Kilometer).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GPSTruckRecordSelectDto);
        }

        /// <summary>
        /// Returns true if GPSTruckRecordSelectDto instances are equal
        /// </summary>
        /// <param name="input">Instance of GPSTruckRecordSelectDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GPSTruckRecordSelectDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GpsDeviceID == input.GpsDeviceID ||
                    (this.GpsDeviceID != null &&
                    this.GpsDeviceID.Equals(input.GpsDeviceID))
                ) && 
                (
                    this.RecordDate == input.RecordDate ||
                    (this.RecordDate != null &&
                    this.RecordDate.Equals(input.RecordDate))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.Kilometer == input.Kilometer ||
                    (this.Kilometer != null &&
                    this.Kilometer.Equals(input.Kilometer))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GpsDeviceID != null)
                    hashCode = hashCode * 59 + this.GpsDeviceID.GetHashCode();
                if (this.RecordDate != null)
                    hashCode = hashCode * 59 + this.RecordDate.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.Kilometer != null)
                    hashCode = hashCode * 59 + this.Kilometer.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
