/* 
 * API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TruckPlanApiClient.Client.SwaggerDateConverter;

namespace TruckPlanApiClient.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
        public partial class User :  IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="fullName">fullName (required).</param>
        /// <param name="age">age.</param>
        /// <param name="gpsDeviceID">gpsDeviceID.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="lastLoginDate">lastLoginDate.</param>
        /// <param name="postGPSTruckRecords">postGPSTruckRecords.</param>
        /// <param name="id">id.</param>
        /// <param name="userName">userName.</param>
        /// <param name="normalizedUserName">normalizedUserName.</param>
        /// <param name="email">email.</param>
        /// <param name="normalizedEmail">normalizedEmail.</param>
        /// <param name="emailConfirmed">emailConfirmed.</param>
        /// <param name="passwordHash">passwordHash.</param>
        /// <param name="securityStamp">securityStamp.</param>
        /// <param name="concurrencyStamp">concurrencyStamp.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="phoneNumberConfirmed">phoneNumberConfirmed.</param>
        /// <param name="twoFactorEnabled">twoFactorEnabled.</param>
        /// <param name="lockoutEnd">lockoutEnd.</param>
        /// <param name="lockoutEnabled">lockoutEnabled.</param>
        /// <param name="accessFailedCount">accessFailedCount.</param>
        public User(string fullName = default(string), int? age = default(int?), string gpsDeviceID = default(string), bool? isActive = default(bool?), DateTime? lastLoginDate = default(DateTime?), List<GPSTruckRecord> postGPSTruckRecords = default(List<GPSTruckRecord>), int? id = default(int?), string userName = default(string), string normalizedUserName = default(string), string email = default(string), string normalizedEmail = default(string), bool? emailConfirmed = default(bool?), string passwordHash = default(string), string securityStamp = default(string), string concurrencyStamp = default(string), string phoneNumber = default(string), bool? phoneNumberConfirmed = default(bool?), bool? twoFactorEnabled = default(bool?), DateTime? lockoutEnd = default(DateTime?), bool? lockoutEnabled = default(bool?), int? accessFailedCount = default(int?))
        {
            // to ensure "fullName" is required (not null)
            if (fullName == null)
            {
                throw new InvalidDataException("fullName is a required property for User and cannot be null");
            }
            else
            {
                this.FullName = fullName;
            }
            this.Age = age;
            this.GpsDeviceID = gpsDeviceID;
            this.IsActive = isActive;
            this.LastLoginDate = lastLoginDate;
            this.PostGPSTruckRecords = postGPSTruckRecords;
            this.Id = id;
            this.UserName = userName;
            this.NormalizedUserName = normalizedUserName;
            this.Email = email;
            this.NormalizedEmail = normalizedEmail;
            this.EmailConfirmed = emailConfirmed;
            this.PasswordHash = passwordHash;
            this.SecurityStamp = securityStamp;
            this.ConcurrencyStamp = concurrencyStamp;
            this.PhoneNumber = phoneNumber;
            this.PhoneNumberConfirmed = phoneNumberConfirmed;
            this.TwoFactorEnabled = twoFactorEnabled;
            this.LockoutEnd = lockoutEnd;
            this.LockoutEnabled = lockoutEnabled;
            this.AccessFailedCount = accessFailedCount;
        }
        
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public int? Age { get; set; }

        /// <summary>
        /// Gets or Sets GpsDeviceID
        /// </summary>
        [DataMember(Name="gpsDeviceID", EmitDefaultValue=false)]
        public string GpsDeviceID { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LastLoginDate
        /// </summary>
        [DataMember(Name="lastLoginDate", EmitDefaultValue=false)]
        public DateTime? LastLoginDate { get; set; }

        /// <summary>
        /// Gets or Sets PostGPSTruckRecords
        /// </summary>
        [DataMember(Name="postGPSTruckRecords", EmitDefaultValue=false)]
        public List<GPSTruckRecord> PostGPSTruckRecords { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedUserName
        /// </summary>
        [DataMember(Name="normalizedUserName", EmitDefaultValue=false)]
        public string NormalizedUserName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedEmail
        /// </summary>
        [DataMember(Name="normalizedEmail", EmitDefaultValue=false)]
        public string NormalizedEmail { get; set; }

        /// <summary>
        /// Gets or Sets EmailConfirmed
        /// </summary>
        [DataMember(Name="emailConfirmed", EmitDefaultValue=false)]
        public bool? EmailConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name="passwordHash", EmitDefaultValue=false)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets SecurityStamp
        /// </summary>
        [DataMember(Name="securityStamp", EmitDefaultValue=false)]
        public string SecurityStamp { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyStamp
        /// </summary>
        [DataMember(Name="concurrencyStamp", EmitDefaultValue=false)]
        public string ConcurrencyStamp { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberConfirmed
        /// </summary>
        [DataMember(Name="phoneNumberConfirmed", EmitDefaultValue=false)]
        public bool? PhoneNumberConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorEnabled
        /// </summary>
        [DataMember(Name="twoFactorEnabled", EmitDefaultValue=false)]
        public bool? TwoFactorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LockoutEnd
        /// </summary>
        [DataMember(Name="lockoutEnd", EmitDefaultValue=false)]
        public DateTime? LockoutEnd { get; set; }

        /// <summary>
        /// Gets or Sets LockoutEnabled
        /// </summary>
        [DataMember(Name="lockoutEnabled", EmitDefaultValue=false)]
        public bool? LockoutEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AccessFailedCount
        /// </summary>
        [DataMember(Name="accessFailedCount", EmitDefaultValue=false)]
        public int? AccessFailedCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  GpsDeviceID: ").Append(GpsDeviceID).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastLoginDate: ").Append(LastLoginDate).Append("\n");
            sb.Append("  PostGPSTruckRecords: ").Append(PostGPSTruckRecords).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  NormalizedUserName: ").Append(NormalizedUserName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  NormalizedEmail: ").Append(NormalizedEmail).Append("\n");
            sb.Append("  EmailConfirmed: ").Append(EmailConfirmed).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  SecurityStamp: ").Append(SecurityStamp).Append("\n");
            sb.Append("  ConcurrencyStamp: ").Append(ConcurrencyStamp).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberConfirmed: ").Append(PhoneNumberConfirmed).Append("\n");
            sb.Append("  TwoFactorEnabled: ").Append(TwoFactorEnabled).Append("\n");
            sb.Append("  LockoutEnd: ").Append(LockoutEnd).Append("\n");
            sb.Append("  LockoutEnabled: ").Append(LockoutEnabled).Append("\n");
            sb.Append("  AccessFailedCount: ").Append(AccessFailedCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.GpsDeviceID == input.GpsDeviceID ||
                    (this.GpsDeviceID != null &&
                    this.GpsDeviceID.Equals(input.GpsDeviceID))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.LastLoginDate == input.LastLoginDate ||
                    (this.LastLoginDate != null &&
                    this.LastLoginDate.Equals(input.LastLoginDate))
                ) && 
                (
                    this.PostGPSTruckRecords == input.PostGPSTruckRecords ||
                    this.PostGPSTruckRecords != null &&
                    input.PostGPSTruckRecords != null &&
                    this.PostGPSTruckRecords.SequenceEqual(input.PostGPSTruckRecords)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.NormalizedUserName == input.NormalizedUserName ||
                    (this.NormalizedUserName != null &&
                    this.NormalizedUserName.Equals(input.NormalizedUserName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.NormalizedEmail == input.NormalizedEmail ||
                    (this.NormalizedEmail != null &&
                    this.NormalizedEmail.Equals(input.NormalizedEmail))
                ) && 
                (
                    this.EmailConfirmed == input.EmailConfirmed ||
                    (this.EmailConfirmed != null &&
                    this.EmailConfirmed.Equals(input.EmailConfirmed))
                ) && 
                (
                    this.PasswordHash == input.PasswordHash ||
                    (this.PasswordHash != null &&
                    this.PasswordHash.Equals(input.PasswordHash))
                ) && 
                (
                    this.SecurityStamp == input.SecurityStamp ||
                    (this.SecurityStamp != null &&
                    this.SecurityStamp.Equals(input.SecurityStamp))
                ) && 
                (
                    this.ConcurrencyStamp == input.ConcurrencyStamp ||
                    (this.ConcurrencyStamp != null &&
                    this.ConcurrencyStamp.Equals(input.ConcurrencyStamp))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneNumberConfirmed == input.PhoneNumberConfirmed ||
                    (this.PhoneNumberConfirmed != null &&
                    this.PhoneNumberConfirmed.Equals(input.PhoneNumberConfirmed))
                ) && 
                (
                    this.TwoFactorEnabled == input.TwoFactorEnabled ||
                    (this.TwoFactorEnabled != null &&
                    this.TwoFactorEnabled.Equals(input.TwoFactorEnabled))
                ) && 
                (
                    this.LockoutEnd == input.LockoutEnd ||
                    (this.LockoutEnd != null &&
                    this.LockoutEnd.Equals(input.LockoutEnd))
                ) && 
                (
                    this.LockoutEnabled == input.LockoutEnabled ||
                    (this.LockoutEnabled != null &&
                    this.LockoutEnabled.Equals(input.LockoutEnabled))
                ) && 
                (
                    this.AccessFailedCount == input.AccessFailedCount ||
                    (this.AccessFailedCount != null &&
                    this.AccessFailedCount.Equals(input.AccessFailedCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.GpsDeviceID != null)
                    hashCode = hashCode * 59 + this.GpsDeviceID.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LastLoginDate != null)
                    hashCode = hashCode * 59 + this.LastLoginDate.GetHashCode();
                if (this.PostGPSTruckRecords != null)
                    hashCode = hashCode * 59 + this.PostGPSTruckRecords.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.NormalizedUserName != null)
                    hashCode = hashCode * 59 + this.NormalizedUserName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.NormalizedEmail != null)
                    hashCode = hashCode * 59 + this.NormalizedEmail.GetHashCode();
                if (this.EmailConfirmed != null)
                    hashCode = hashCode * 59 + this.EmailConfirmed.GetHashCode();
                if (this.PasswordHash != null)
                    hashCode = hashCode * 59 + this.PasswordHash.GetHashCode();
                if (this.SecurityStamp != null)
                    hashCode = hashCode * 59 + this.SecurityStamp.GetHashCode();
                if (this.ConcurrencyStamp != null)
                    hashCode = hashCode * 59 + this.ConcurrencyStamp.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.PhoneNumberConfirmed != null)
                    hashCode = hashCode * 59 + this.PhoneNumberConfirmed.GetHashCode();
                if (this.TwoFactorEnabled != null)
                    hashCode = hashCode * 59 + this.TwoFactorEnabled.GetHashCode();
                if (this.LockoutEnd != null)
                    hashCode = hashCode * 59 + this.LockoutEnd.GetHashCode();
                if (this.LockoutEnabled != null)
                    hashCode = hashCode * 59 + this.LockoutEnabled.GetHashCode();
                if (this.AccessFailedCount != null)
                    hashCode = hashCode * 59 + this.AccessFailedCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
